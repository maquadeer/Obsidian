{
	"nodes":[
		{"type":"text","text":"### 1. Physical or Internal Level:\n\nThe physical or internal layer is the lowest level of data abstraction in the database management system. It is the layer that defines how data is actually stored in the database. It defines methods to access the data in the database. It defines complex data structures in detail, so it is very complex to understand, which is why it is kept hidden from the end user.\n\nData Administrators (DBA) decide how to arrange data and where to store data. The Data Administrator (DBA) is the person whose role is to manage the data in the database at the physical or internal level. There is a data center that securely stores the raw data in detail on hard drives at this level.\n\n### 2. Logical or Conceptual Level:\n\nThe logical or conceptual level is the intermediate or next level of data abstraction. It explains what data is going to be stored in the database and what the relationship is between them.\n\nIt describes the structure of the entire data in the form of tables. The logical level or conceptual level is less complex than the physical level. With the help of the logical level, Data Administrators (DBA) abstract data from raw data present at the physical level.\n\n### 3. View or External Level:\n\nView or External Level is the highest level of data abstraction. There are different views at this level that define the parts of the overall data of the database. This level is for the end-user interaction; at this level, end users can access the data based on their queries.","id":"cf57dfad5aee79d8","x":-605,"y":-61,"width":545,"height":901,"color":"5"},
		{"type":"text","text":"Here is the information organized in table form:\n\n|Strong Entity Set|Weak Entity Set|\n|---|---|\n|- A strong entity is independent and does not depend on any other entity for its existence.|- A weak entity is dependent on a strong entity for its existence and cannot exist without a corresponding strong entity.|\n|- It has a primary key attribute that uniquely identifies each instance of the entity.|- It does not have a primary key attribute but has a foreign key that references the primary key of the associated strong entity.|\n|- In an ER diagram, a strong entity is represented by a single rectangle.|- In an ER diagram, a weak entity is represented by a double rectangle.|\n|- The relationship between two strong entities is represented by a single diamond.|- The relationship between a strong entity and a weak entity is represented by a double diamond.|\n|- Examples of strong entity sets can include entities like \"Employee\" with a primary key attribute like \"Employee_ID\".|- Examples of weak entity sets can include entities like \"Dependent\" that rely on a corresponding \"Employee\" entity for existence.|","id":"4b9798ddbcdb2599","x":-20,"y":-61,"width":697,"height":583,"color":"3"},
		{"type":"text","text":"Outer join is a type of join in SQL that returns matched values and unmatched values from either or both tables. There are three types of outer joins: left outer join, right outer join, and full outer join. Here is a brief explanation of each type:\n\n1. Left outer join:\n\n- Returns all the rows from the left table and the matching rows from the right table.\n- If there is no match in the right table, the result will contain NULL values.\n- Syntax: SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;\n\n2. Right outer join:\n\n- Returns all the rows from the right table and the matching rows from the left table.\n- If there is no match in the left table, the result will contain NULL values.\n- Syntax: SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;\n\n3. Full outer join:\n\n- Returns all the rows from both tables, including the unmatched rows.\n- If there is no match in one of the tables, the result will contain NULL values.\n- Syntax: SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;","id":"58e8dfd00066ef47","x":720,"y":-61,"width":759,"height":563,"color":"4"},
		{"type":"text","text":"# SAQ","id":"af50bfd37ce0f8cc","x":595,"y":-280,"width":250,"height":60},
		{"type":"text","text":"A view in SQL is a virtual table created based on the result set of another SQL statement. Views help to reduce the complexity of multiple tables and deliver data in a simple manner. They can join and simplify multiple tables, act as aggregated tables, hide the complexity of data, and restrict data access. Views are created using the CREATE VIEW statement and can be created from a single table, multiple tables, or another view","id":"39301062483fcfa2","x":1520,"y":-61,"width":570,"height":268,"color":"3"},
		{"type":"text","text":"Multiple granularity is a locking mechanism used in database management systems that hierarchically breaks up the database into smaller blocks that can be locked. This technique allows the locking of various data sizes and sets, decreasing lock overhead and increasing concurrency. Different types of locks can be set at different levels of granularity, reducing locking overhead and improving performance[","id":"f8074cb925234720","x":2140,"y":-61,"width":611,"height":216,"color":"5"},
		{"type":"text","text":"|Triggers|Functions|\n|---|---|\n|Triggers are event handlers that react to specific actions, such as insert, update, or delete operations on a table.|Functions are named blocks of code that perform a specific task and can be invoked explicitly.|\n|They are automatically executed when the specified event occurs.|They can take input parameters and return a single value.|\n|Triggers are used to enforce data integrity, perform auditing, or automate certain actions based on events.|Functions are used to encapsulate reusable logic, perform calculations, or manipulate data.|\n|Triggers cannot take input or return values.|Functions can be called from SQL statements or used in expressions.|","id":"770ba3f0525f4437","x":2833,"y":-68,"width":847,"height":388,"color":"3"},
		{"type":"file","file":"M3/pics/Screenshot_2023-08-31-13-08-32-80.jpg","id":"118a53a68006f9d0","x":-605,"y":1360,"width":753,"height":5394},
		{"type":"file","file":"M3/pics/WhatsApp Image 2023-08-31 at 1.27.30 PM.jpeg","id":"4615092567bf00ac","x":280,"y":1640,"width":1295,"height":1109},
		{"type":"text","text":"Here is the information about the various types of integrity constraints in SQL, specifically domain constraints, in tabular form:\n\n|Type of Integrity Constraint|Description|\n|---|---|\n|Domain Constraints|User-defined columns that help the user enter the value according to the data type. They define the domain or the set of values for an attribute and ensure that the value taken by the attribute is within the specified range.|\n|Entity Integrity Constraints|Ensure that the primary key of a table is unique and not null. They prevent duplicate rows in a table.|\n|Referential Integrity Constraints|Ensure that the foreign key in a table refers to a valid primary key in another table. They maintain consistency between related tables.|\n|Key Constraints|Ensure that the values in a column or a set of columns are unique and not null. They enforce uniqueness in a table.|","id":"0923b7d79bf6c078","x":1680,"y":1520,"width":1000,"height":480,"color":"4"},
		{"type":"text","text":"Destroying and altering tables and views in SQL can be done using the following statements:\n\n1. Destroying Tables and Views:\n    \n    - To destroy a table: `DROP TABLE table_name;`\n    - To destroy a view: `DROP VIEW view_name;`\n    \n2. Altering Tables and Views:\n    \n    - To alter a table: `ALTER TABLE table_name ...;`\n    - To alter a view: `ALTER VIEW view_name ...;`\n    \n\nExample:\n\n1. Destroying a table:\n\nsql\n\n`DROP TABLE employees;`\n\n2. Destroying a view:\n\nsql\n\n`DROP VIEW sales_view;`\n\n3. Altering a table:\n\nsql\n\n`ALTER TABLE customers ADD COLUMN email VARCHAR(255);`\n\n4. Altering a view:\n\nsql\n\n`ALTER VIEW product_view AS SELECT product_name, price FROM products WHERE price > 100;`","id":"11520cdd65128989","x":1680,"y":2040,"width":1025,"height":800},
		{"type":"text","text":"Normalization is a process of organizing data in a database to reduce redundancy and dependency by breaking it into smaller and more relevant tables. There are several normal forms in database normalization, including the first normal form (1NF), second normal form (2NF), and third normal form (3NF). Here are some examples of each:\n\n1. First Normal Form (1NF):\n\n- A table that stores customer information has columns for first name, last name, and email address. To normalize this table to 1NF, each column should have a unique name, and each cell should contain only a single value. Therefore, the table should be split into three separate tables, one for each attribute.\n\n2. Second Normal Form (2NF):\n\n- A table that stores customer orders has columns for order ID, customer ID, product ID, product name, and price. To normalize this table to 2NF, the table should be split into two separate tables. One table should contain order ID, customer ID, and product ID, while the other table should contain product ID, product name, and price.\n\n3. Third Normal Form (3NF):\n\n- A table that stores employee information has columns for employee ID, employee name, department ID, department name, and department location. To normalize this table to 3NF, the table should be split into three separate tables. One table should contain employee ID and employee name, another table should contain department ID, department name, and department location, and the third table should contain employee ID and department ID.","id":"e332b6aa266af415","x":2925,"y":1590,"width":755,"height":730},
		{"type":"text","text":"Imagine we're building a restaurant management application. That application needs to store data about the company's employees and it starts out by creating the following table of employees:\n\n|EMPLOYEE_ID|NAME|JOB_CODE|JOB|STATE_CODE|HOME_STATE|\n|---|---|---|---|---|---|\n|E001|Alice|J01|Chef|26|Michigan|\n|E001|Alice|J02|Waiter|26|Michigan|\n|E002|Bob|J02|Waiter|56|Wyoming|\n|E002|Bob|J03|Bartender|56|Wyoming|\n|E003|Alice|J01|Chef|56|Wyoming|\n\nAll the entries are atomic and there is a composite primary key (employee_id, job_code) so the table is in the **first normal form (1NF)**.\n\nBut even if you only know someone's `employee_id`, then you can determine their `name`, `home_state`, and `state_code` (because they should be the same person). This means `name`, `home_state`, and `state_code` are dependent on `employee_id` (a part of primary composite key). So, the table is not in **2NF**. We should separate them to a different table to make it 2NF.\n\n### Example of Second Normal Form (2NF)\n\n#### `employee_roles` Table\n\n|EMPLOYEE_ID|JOB_CODE|\n|---|---|\n|E001|J01|\n|E001|J02|\n|E002|J02|\n|E002|J03|\n|E003|J01|\n\n#### `employees` Table\n\n|EMPLOYEE_ID|NAME|STATE_CODE|HOME_STATE|\n|---|---|---|---|\n|E001|Alice|26|Michigan|\n|E002|Bob|56|Wyoming|\n|E003|Alice|56|Wyoming|\n\n#### `jobs` table\n\n|JOB_CODE|JOB|\n|---|---|\n|J01|Chef|\n|J02|Waiter|\n|J03|Bartender|\n\n`home_state` is now dependent on `state_code`. So, if you know the `state_code`, then you can find the `home_state` value.\n\nTo take this a step further, we should separate them again to a different table to make it 3NF.\n\n### Example of Third Normal Form (3NF)\n\n#### `employee_roles` Table\n\n|EMPLOYEE_ID|JOB_CODE|\n|---|---|\n|E001|J01|\n|E001|J02|\n|E002|J02|\n|E002|J03|\n|E003|J01|\n\n#### `employees` Table\n\n|EMPLOYEE_ID|NAME|STATE_CODE|\n|---|---|---|\n|E001|Alice|26|\n|E002|Bob|56|\n|E003|Alice|56|\n\n#### `jobs` Table\n\n|JOB_CODE|JOB|\n|---|---|\n|J01|Chef|\n|J02|Waiter|\n|J03|Bartender|\n\n#### `states` Table\n\n|STATE_CODE|HOME_STATE|\n|---|---|\n|26|Michigan|\n|56|Wyoming|\n\nNow our database is in 3NF.","id":"520de3d9c1837ba2","x":2925,"y":2360,"width":876,"height":2480},
		{"type":"text","text":"Data Definition Language (DDL) and Data Manipulation Language (DML) are two types of SQL commands used to manage databases. Here are some examples of DDL and DML commands:\n\n1. DDL Commands:\n\n- CREATE: Used to create a new table in the database. Syntax: `CREATE TABLE table_name (column1 datatype1, column2 datatype2, ...);`\n- ALTER: Used to alter the structure of the database. Syntax: `ALTER TABLE table_name ADD column_name datatype;`\n- DROP: Used to delete both the structure and record stored in the table. Syntax: `DROP TABLE table_name;`\n- TRUNCATE: Used to delete all the rows from the table and free the space containing the table. Syntax: `TRUNCATE TABLE table_name;`\n\n2. DML Commands:\n\n- INSERT: Used to insert data into the row of a table. Syntax: `INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);`\n- UPDATE: Used to modify the existing data in a table. Syntax: `UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;`\n- DELETE: Used to delete data from a table. Syntax: `DELETE FROM table_name WHERE condition;`","id":"61f978ca2e38a6e1","x":3760,"y":1590,"width":562,"height":706},
		{"type":"text","text":"# LAQ","id":"d49c0ab243e43de2","x":1325,"y":960,"width":250,"height":50},
		{"type":"text","text":"|S. No.|Parameters|Triggers|Procedures|\n|---|---|---|---|\n|1.|Basics|A Trigger is implicitly invoked whenever any event such as INSERT, DELETE, or UPDATE occurs in a TABLE.|A Procedure is explicitly called by the user/application using statements or commands such as exec, EXECUTE, or simply procedure name|\n|2.|Action|When an event occurs, a trigger helps to execute an action automatically.|A procedure helps to perform a specified task when it is invoked.|\n|3.|Define/ call|Only nesting of triggers can be achieved in a table. We cannot define/call a trigger inside another trigger.|We can define/call procedures inside another procedure.|\n|4.|Syntax|In a database, the syntax to define a trigger: CREATE TRIGGER TRIGGER_NAME|In a database, the syntax to define a procedure: CREATE PROCEDURE PROCEDURE_NAME|\n|5.|Transaction statements|Transaction statements such as COMMIT, ROLLBACK, and SAVEPOINT are not allowed in triggers.|All transaction statements such as COMMIT and ROLLBACK are allowed in procedures.|\n|6.|Usage|Triggers are used to maintain referential integrity by keeping a record of activities performed on the table.|Procedures are used to perform tasks defined or specified by the users.|\n|7.|Return value|We cannot return values in a trigger. Also, as an input, we cannot pass values as a parameter.|We can return 0 to n values. However, we can pass values as parameters.|","id":"054b41fc843937e7","x":4440,"y":1520,"width":720,"height":920},
		{"type":"text","text":"DBA stands for Database Administrator in DBMS. The role of a DBA involves managing and maintaining the database system within an organization. Here are some of the key responsibilities and rules of a DBA:\n\n1. Responsibilities of a DBA:\n- Database Design: The DBA is responsible for designing the structure and organization of the database.\n- Performance Optimization: DBAs monitor and optimize the performance of the database to ensure efficient and fast data retrieval.\n- Data Security and Integrity: DBAs implement security measures to protect the database from unauthorized access and ensure data integrity.\n- Backup and Recovery: DBAs create backup and recovery plans to safeguard data and restore it in case of system failures or data loss.\n- User Support: DBAs provide support to users, assisting them with database-related issues and queries.\n\n2. Rules of a DBA:\n- Database Content: The DBA makes decisions regarding the content of the database, including what data should be stored and how it should be organized.\n- Storage Structure and Access Strategy: The DBA plans the storage structure of the database and determines the strategy for accessing and retrieving data efficiently.\n- Security and Integrity Checks: The DBA defines security measures and integrity checks to ensure that data remains secure and consistent.\n- Backup and Recovery Strategies: The DBA formulates backup and recovery strategies to protect data and ensure its availability in case of failures.\n- Performance Monitoring and Adaptation: The DBA monitors the performance of the database and responds to changes in requirements by adapting the system accordingly.\n\nIn summary, a DBA is responsible for managing and maintaining the database system. Their role includes database design, performance optimization, data security, backup and recovery, user support, and adherence to rules such as database content, storage structure, security checks, backup strategies, and performance monitoring[1][2][3][4][5][6].\n","id":"47652117fb427a5b","x":4041,"y":2520,"width":1732,"height":560}
	],
	"edges":[
		{"id":"dbfae7be0e98ef42","fromNode":"af50bfd37ce0f8cc","fromSide":"bottom","toNode":"cf57dfad5aee79d8","toSide":"top"},
		{"id":"181f59cf86236ced","fromNode":"af50bfd37ce0f8cc","fromSide":"bottom","toNode":"4b9798ddbcdb2599","toSide":"top"},
		{"id":"0d9dba15075cc20f","fromNode":"af50bfd37ce0f8cc","fromSide":"bottom","toNode":"58e8dfd00066ef47","toSide":"top"},
		{"id":"923a538d6785ed67","fromNode":"af50bfd37ce0f8cc","fromSide":"bottom","toNode":"39301062483fcfa2","toSide":"top"},
		{"id":"4dab0e6716f9338d","fromNode":"af50bfd37ce0f8cc","fromSide":"bottom","toNode":"f8074cb925234720","toSide":"top"},
		{"id":"0ba7330c89a3b82a","fromNode":"af50bfd37ce0f8cc","fromSide":"bottom","toNode":"770ba3f0525f4437","toSide":"top"},
		{"id":"533ea2df90b1137d","fromNode":"118a53a68006f9d0","fromSide":"right","toNode":"4615092567bf00ac","toSide":"bottom"},
		{"id":"fb083cbe00d0a65c","fromNode":"0923b7d79bf6c078","fromSide":"bottom","toNode":"11520cdd65128989","toSide":"top"},
		{"id":"c035b01d5a431867","fromNode":"e332b6aa266af415","fromSide":"bottom","toNode":"520de3d9c1837ba2","toSide":"top"},
		{"id":"04b197f47a8281e3","fromNode":"e332b6aa266af415","fromSide":"right","toNode":"61f978ca2e38a6e1","toSide":"left"},
		{"id":"b8aef1d4aca53d62","fromNode":"d49c0ab243e43de2","fromSide":"bottom","toNode":"118a53a68006f9d0","toSide":"top","label":"2"},
		{"id":"5ecf6d9a3cff4864","fromNode":"d49c0ab243e43de2","fromSide":"bottom","toNode":"0923b7d79bf6c078","toSide":"top","label":"3"},
		{"id":"611323e486cf0391","fromNode":"d49c0ab243e43de2","fromSide":"bottom","toNode":"e332b6aa266af415","toSide":"top","label":"4"},
		{"id":"783db88103b95906","fromNode":"d49c0ab243e43de2","fromSide":"bottom","toNode":"054b41fc843937e7","toSide":"top","label":"6"},
		{"id":"7ad5842aa90a149b","fromNode":"054b41fc843937e7","fromSide":"bottom","toNode":"47652117fb427a5b","toSide":"top"}
	]
}