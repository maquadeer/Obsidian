{
	"nodes":[
		{"type":"text","text":"A data model is a conceptual representation of data objects, their relationships, and the rules that govern them. It provides a transparent picture of data, helping in the creation and implementation of a database[1][2][3][4]. There are different categories of data models, including:\n\n1. Hierarchical Model\n\n2. Network Model:\n\n3. Entity-Relationship Model: \n\n4. Relational Model: .\n\n5. Object-Oriented Data Model: \n\n6. Object-Relational Data Model: \n7. Flat Data Model: \n\n8. Semi-Structured Data Model: \n\n9. Associative Data Model: \n","id":"0ec2258bb27de9a2","x":-558,"y":-75,"width":538,"height":435,"color":"4"},
		{"type":"text","text":"|Feature|B-trees|B+ trees|\n|---|---|---|\n|Data Storage|Store data in both leaf and internal nodes|Store data in leaf nodes only|\n|Key Duplication|Allow key duplication in internal and leaf nodes|Do not allow key duplication in internal nodes, only in leaf nodes|\n|Data Pointers|Store data pointers in both leaf and internal nodes|Store data pointers in leaf nodes only|\n|Leaf Node Linking|Do not link leaf nodes together|Link leaf nodes together, making range search operations efficient|\n|Popular Use|Less popular than B+ trees|More popular than B-trees, used in 99% of database management systems|","id":"14bcf697fe355057","x":459,"y":-62,"width":661,"height":422,"color":"5"},
		{"type":"text","text":"# SAQ","id":"f8884e6b3a7a5415","x":334,"y":-320,"width":250,"height":60,"color":"4"},
		{"type":"text","text":"A view in a database is a virtual table that is created by combining the result set of a stored query. It is a dynamic table that can be computed from the data in the database and is used to restrict access to certain data or to simplify complex data structures. Here is an example of a view:\n\nCREATE VIEW StudentInfo AS SELECT Stu_Id, Stu_Name FROM Student;","id":"87a4246965d14343","x":1149,"y":-60,"width":411,"height":300,"color":"3"},
		{"type":"text","text":"Aggregate functions in SQL are used to perform calculations on a set of values and return a single value. These functions are often used with the GROUP BY and HAVING clauses of the SELECT statement. Here are some key points about SQL aggregate functions:\n\n- An aggregate function operates on a set of values and returns a single value.\n- Aggregate functions are often used with the GROUP BY clause to group the result set into subsets and calculate the aggregate value for each subset.\n- The most commonly used SQL aggregate functions are COUNT(), SUM(), AVG(), MIN(), and MAX().\n- COUNT() returns the number of items in a set.\n- SUM() returns the sum of the values in a set.\n- AVG() returns the average value of the values in a set.\n- MIN() returns the minimum value in a set.\n- MAX() returns the maximum value in a set.\n- Aggregate functions ignore NULL values, except for COUNT(*).","id":"680bce7ef4c4a3ea","x":1621,"y":-51,"width":619,"height":491,"color":"6"},
		{"type":"file","file":"M3/pics/Pasted image 20230831130222.png","id":"5635bb258f91853a","x":0,"y":-60,"width":400,"height":240},
		{"type":"text","text":"A data warehouse is a centralized repository of integrated data from one or more disparate sources, designed to enable and support business intelligence activities, especially analytics. It provides a long-range view of data over time to inform decision-making.","id":"e8abf0906719f938","x":2254,"y":-48,"width":346,"height":243,"color":"2"},
		{"type":"text","text":"Aggregation is a concept in database management that represents a relationship between classes or tables where one entity contains another entity as a part. For example, a Student class can contain an object of the Address class, which holds information such as city, state, country, and zip code. The concept of aggregation allows for code reusability and helps in organizing and representing complex relationships between entities in object-oriented programming and database management systems[1][2][3].\n\nCitations:\n[1] https://www.sqlshack.com/learn-sql-aggregate-functions/\n[2] https://www.simplilearn.com/tutorials/sql-tutorial/sql-aggregate-functions\n[3] https://www.sqlservertutorial.net/sql-server-aggregate-functions/\n[4] https://www.sqltutorial.org/sql-aggregate-functions/\n[5] https://blog.hubspot.com/website/aggregate-sql-functions\n[6] https://learn.microsoft.com/en-us/sql/t-sql/functions/aggregate-functions-transact-sql?view=sql-server-ver16\n\n\n  \nDatabase management systems (DBMS) have replaced the traditional filing system by providing an easy, secure, efficient, and reliable way of storing, retrieving, accessing, and sharing data within databases.\n\nDBMS is advantageous over the file system because it reduces [data redundancy](https://en.wikipedia.org/wiki/Data_redundancy) (through [database normalization](https://en.wikipedia.org/wiki/Database_normalization)) and enhances [data integrity](https://en.wikipedia.org/wiki/Data_integrity). It also offers flexibility, privacy, and data security.\n\nA DBMS consists of entities whose data can be stored. They can be people, things, objects, or places. Two or more entities are joined through a relationship, that is simply a way of connecting data sets. Some entities in a DBMS may have little value, which makes it difficult to use them for certain operations.\n\nIn such situations, we can combine these entities with other entities to form a complex one that makes sense. We can do this operation through a process called aggregation. Aggregation in DBMS links trivial entities through relationships to ensure that the entire system functions well.\n\nThis article takes you through important aspects regarding aggregation in DBMS. It also explains why it is needed and how it takes place.\n  \nDatabase management systems (DBMS) have replaced the traditional filing system by providing an easy, secure, efficient, and reliable way of storing, retrieving, accessing, and sharing data within databases.\n\nDBMS is advantageous over the file system because it reduces [data redundancy](https://en.wikipedia.org/wiki/Data_redundancy) (through [database normalization](https://en.wikipedia.org/wiki/Database_normalization)) and enhances [data integrity](https://en.wikipedia.org/wiki/Data_integrity). It also offers flexibility, privacy, and data security.\n\nA DBMS consists of entities whose data can be stored. They can be people, things, objects, or places. Two or more entities are joined through a relationship, that is simply a way of connecting data sets. Some entities in a DBMS may have little value, which makes it difficult to use them for certain operations.\n\nIn such situations, we can combine these entities with other entities to form a complex one that makes sense. We can do this operation through a process called aggregation. Aggregation in DBMS links trivial entities through relationships to ensure that the entire system functions well.\n\nThis article takes you through important aspects regarding aggregation in DBMS. It also explains why it is needed and how it takes place.  \nDatabase management systems (DBMS) have replaced the traditional filing system by providing an easy, secure, efficient, and reliable way of storing, retrieving, accessing, and sharing data within databases.\n\nDBMS is advantageous over the file system because it reduces [data redundancy](https://en.wikipedia.org/wiki/Data_redundancy) (through [database normalization](https://en.wikipedia.org/wiki/Database_normalization)) and enhances [data integrity](https://en.wikipedia.org/wiki/Data_integrity). It also offers flexibility, privacy, and data security.\n\nA DBMS consists of entities whose data can be stored. They can be people, things, objects, or places. Two or more entities are joined through a relationship, that is simply a way of connecting data sets. Some entities in a DBMS may have little value, which makes it difficult to use them for certain operations.\n\nIn such situations, we can combine these entities with other entities to form a complex one that makes sense. We can do this operation through a process called aggregation. Aggregation in DBMS links trivial entities through relationships to ensure that the entire system functions well.\n\nThis article takes you through important aspects regarding aggregation in DBMS. It also explains why it is needed and how it takes place.","id":"f74b647587b53222","x":-25,"y":920,"width":968,"height":1680},
		{"type":"text","text":"https://www.tutorialspoint.com/draw-an-er-diagram-for-a-university-database-application-dbms","id":"c5c7b21568728e5d","x":980,"y":920,"width":474,"height":80},
		{"type":"text","text":"i) To display all the employees working under the managers 7555 and 7800, we can use the following SQL query:\n\n`SELECT * FROM EMP WHERE mgr IN (7555, 7800);`\n\nThis will display all the details of the employees working under the managers 7555 and 7800.ii) To delete all departments where employees earn between 2000 and 4500, we can use the following SQL query:\n\n`DELETE FROM DEPT WHERE dno IN (   SELECT dno   FROM EMP   WHERE salary BETWEEN 2000 AND 4500 );`\n\nThis will delete all the departments where employees earn between 2000 and 4500.iii) To update commission by 10% of all those whose salary > 5000, we can use the following SQL query:\n\n`UPDATE EMP SET commission = commission * 1.1 WHERE salary > 5000;`","id":"17a007e6457264f3","x":1520,"y":920,"width":507,"height":498},
		{"type":"text","text":"A BEFORE UPDATE trigger is a database object that is automatically executed before an update operation is performed on a table. It allows you to validate or modify the data being updated before it is actually updated in the table. Here is an example of a BEFORE UPDATE trigger in MySQL:\n\nsql\n\n`CREATE TRIGGER before_update_trigger BEFORE UPDATE ON EMP FOR EACH ROW BEGIN   -- Trigger code   IF NEW.salary > 5000 THEN     SET NEW.commission = NEW.commission * 1.1;   END IF; END;`\n\nIn this example, the trigger is created on the EMP table. Before any update operation is executed on the EMP table, the trigger code is executed. The trigger checks if the updated salary is greater than 5000. If it is, the commission is updated by increasing it by 10% (multiplying it by 1.1).The BEFORE UPDATE trigger allows you to perform custom logic or validations before updating the data in the table. It gives you the ability to modify the values being updated based on certain conditions or requirements.","id":"c445075d5e80e814","x":1454,"y":1480,"width":670,"height":427},
		{"type":"text","text":"# LAQ","id":"3db6bb7866187d14","x":1120,"y":640,"width":250,"height":60},
		{"type":"text","text":"https://www.javatpoint.com/dbms-lock-based-protocol","id":"28396b287a646e3b","x":2124,"y":881,"width":434,"height":119},
		{"type":"file","file":"M3/pics/Screenshot_2023-08-31-13-08-32-80.jpg","id":"a288a2d0b02f9314","x":-840,"y":920,"width":753,"height":5394}
	],
	"edges":[
		{"id":"b6e66854e5aa73a2","fromNode":"f8884e6b3a7a5415","fromSide":"bottom","toNode":"0ec2258bb27de9a2","toSide":"top"},
		{"id":"f87cc86b08888d5d","fromNode":"f8884e6b3a7a5415","fromSide":"bottom","toNode":"5635bb258f91853a","toSide":"top"},
		{"id":"4392632ab1285b69","fromNode":"f8884e6b3a7a5415","fromSide":"bottom","toNode":"14bcf697fe355057","toSide":"top"},
		{"id":"c36ff0edb041b4c5","fromNode":"f8884e6b3a7a5415","fromSide":"bottom","toNode":"87a4246965d14343","toSide":"top"},
		{"id":"468f53de83f569c5","fromNode":"f8884e6b3a7a5415","fromSide":"bottom","toNode":"680bce7ef4c4a3ea","toSide":"top"},
		{"id":"85e04c15382fe501","fromNode":"f8884e6b3a7a5415","fromSide":"bottom","toNode":"e8abf0906719f938","toSide":"top"},
		{"id":"3679899cf7948ae0","fromNode":"3db6bb7866187d14","fromSide":"bottom","toNode":"a288a2d0b02f9314","toSide":"top"},
		{"id":"7a628797e20c06d2","fromNode":"a288a2d0b02f9314","fromSide":"right","toNode":"f74b647587b53222","toSide":"left"},
		{"id":"732af0c3e7015d85","fromNode":"3db6bb7866187d14","fromSide":"bottom","toNode":"c5c7b21568728e5d","toSide":"top","label":"uni"},
		{"id":"52e8b3682372197d","fromNode":"3db6bb7866187d14","fromSide":"bottom","toNode":"17a007e6457264f3","toSide":"top","label":"sql"},
		{"id":"892286aa215d9120","fromNode":"17a007e6457264f3","fromSide":"bottom","toNode":"c445075d5e80e814","toSide":"top"},
		{"id":"8edf4bbd3fa1706d","fromNode":"3db6bb7866187d14","fromSide":"bottom","toNode":"28396b287a646e3b","toSide":"top","label":"LOCK BASED PROT"}
	]
}