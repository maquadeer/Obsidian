{
	"nodes":[
		{"id":"60b509176981029e","x":-663,"y":-121,"width":613,"height":421,"color":"5","type":"text","text":"To construct a B+ tree with an order of 3 for the given set of values (5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 99), we can follow the steps of B+ tree construction. Here is a simplified representation of the B+ tree:\n\n\nExplanation:\n\n- The root node contains the value 35, which acts as the separator for the child nodes.\n- The left child node contains the values 15 and 25.\n- The right child node contains the values 55, 65, 75, 85, 95, and 99.\n- The leaf nodes (bottom level) contain the actual values."},
		{"id":"e95a00f5f74cdaf2","x":-50,"y":-280,"width":250,"height":60,"type":"text","text":"PAPER 1"},
		{"id":"35123e17da13ab2a","x":0,"y":-121,"width":641,"height":788,"color":"3","type":"text","text":"Database languages are used to create and maintain databases in a DBMS. There are different types of database languages, including:\n\n1. Data Definition Language (DDL):\n\n- Used to define the database schema and structure.\n- Examples of DDL commands include CREATE, ALTER, DROP, and TRUNCATE.\n- DDL commands are used to create tables, modify table structure, and delete tables.\n\n2. Data Manipulation Language (DML):\n\n- Used to manipulate the data stored in the database.\n- Examples of DML commands include SELECT, INSERT, UPDATE, and DELETE.\n- DML commands are used to insert, modify, and retrieve data from tables.\n\n3. Data Control Language (DCL):\n\n- Used to control access to the database.\n- Examples of DCL commands include GRANT and REVOKE.\n- DCL commands are used to grant or revoke access to tables and views.\n\n4. Transaction Control Language (TCL):\n\n- Used to manage transactions in the database.\n- Examples of TCL commands include COMMIT and ROLLBACK.\n- TCL commands are used to commit or rollback transactions."},
		{"id":"eb4a1224b0ae02fe","x":740,"y":-107,"width":700,"height":907,"color":"4","type":"text","text":"Generalization, specialization, and aggregation are important concepts in the Entity-Relationship (ER) model used in database design. Here is an explanation of each concept with an example:\n\n1. Generalization:\n\n- Generalization is a bottom-up approach in which two or more entities are combined to form a higher-level entity that shares common attributes.\n- Example: In a bank, there are two types of accounts - savings and current. These two entities can be generalized to a higher-level entity called \"account,\" which shares common attributes like account number, balance, and interest rate.\n\n2. Specialization:\n\n- Specialization is a top-down approach in which a higher-level entity is divided into two or more lower-level entities that share specific attributes.\n- Example: In a university, the \"person\" entity can be specialized into \"student\" and \"faculty\" entities, which share specific attributes like student ID, GPA, and major for students, and faculty ID, department, and rank for faculty.\n\n3. Aggregation:\n\n- Aggregation is a process of combining multiple entities into a single entity that represents a relationship between them.\n- Example: In a university, the \"course\" entity can be aggregated with the \"instructor\" entity to form a new entity called \"teaching,\" which represents the relationship between a course and an instructor.\n\nIn summary, generalization, specialization, and aggregation are important concepts in database design that help to organize and simplify complex data structures. Generalization combines lower-level entities to form a higher-level entity, specialization divides a higher-level entity into lower-level entities, and aggregation combines multiple entities to represent a relationship between them"},
		{"id":"44bf738fc236494e","x":1612,"y":-124,"width":468,"height":164,"type":"text","text":"- SQL: SELECT s_name FROM Sailors, Reserves, Boats WHERE Sailors.s_id = Reserves.s_id AND Reserves.b_id = Boats.b_id AND Boats.b_color = 'red';"},
		{"id":"b4e51ab396871eec","x":1602,"y":74,"width":488,"height":79,"type":"text","text":"- SQL: SELECT s_name FROM Sailors, Reserves WHERE Sailors.s_id = Reserves.s_id;"},
		{"id":"6dc8cc06563835cf","x":1574,"y":210,"width":545,"height":180,"type":"text","text":"- SQL: SELECT s_name FROM Sailors, Reserves, Boats WHERE Sailors.s_id = Reserves.s_id AND Reserves.b_id = Boats.b_id AND (Boats.b_color = 'red' OR Boats.b_color = 'green') GROUP BY s_name HAVING COUNT(DISTINCT Boats.b_color) = 2;"},
		{"id":"e24e7338933d79e4","x":1588,"y":437,"width":517,"height":133,"type":"text","text":"- SQL: SELECT s_name FROM Sailors, Reserves, Boats WHERE Sailors.s_id = Reserves.s_id AND Reserves.b_id = Boats.b_id AND (Boats.b_color = 'red' OR Boats.b_color = 'white');"},
		{"id":"f20cb1f6267a1dc6","x":1640,"y":610,"width":413,"height":201,"type":"text","text":"- SQL: SELECT s_name FROM Sailors WHERE NOT EXISTS (SELECT b_id FROM Boats WHERE NOT EXISTS (SELECT * FROM Reserves WHERE Sailors.s_id = Reserves.s_id AND Boats.b_id = Reserves.b_id));"}
	],
	"edges":[
		{"id":"624bcb594eae6da6","fromNode":"e95a00f5f74cdaf2","fromSide":"bottom","toNode":"60b509176981029e","toSide":"top"},
		{"id":"100fd31e8a259767","fromNode":"e95a00f5f74cdaf2","fromSide":"bottom","toNode":"35123e17da13ab2a","toSide":"top"},
		{"id":"1ace32e1e4f4ecb9","fromNode":"e95a00f5f74cdaf2","fromSide":"bottom","toNode":"eb4a1224b0ae02fe","toSide":"top"},
		{"id":"5d50662e2624ed9f","fromNode":"e95a00f5f74cdaf2","fromSide":"bottom","toNode":"44bf738fc236494e","toSide":"top"},
		{"id":"17434431c07f3178","fromNode":"44bf738fc236494e","fromSide":"bottom","toNode":"b4e51ab396871eec","toSide":"top"},
		{"id":"9272cd66579030b8","fromNode":"b4e51ab396871eec","fromSide":"bottom","toNode":"6dc8cc06563835cf","toSide":"top"},
		{"id":"f01f792bd9ad494e","fromNode":"6dc8cc06563835cf","fromSide":"bottom","toNode":"e24e7338933d79e4","toSide":"top"},
		{"id":"f2c591c5dce535e3","fromNode":"e24e7338933d79e4","fromSide":"bottom","toNode":"f20cb1f6267a1dc6","toSide":"top"}
	]
}